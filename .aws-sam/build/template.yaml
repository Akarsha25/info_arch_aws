Transform: AWS::Serverless-2016-10-31
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: Function
      FunctionName: FetchData
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          BUCKET_BUCKET_NAME:
            Ref: Bucket
          BUCKET_BUCKET_ARN:
            Fn::GetAtt:
            - Bucket
            - Arn
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:GetObjectLegalHold
          - s3:GetObjectRetention
          - s3:GetObjectTorrent
          - s3:GetObjectVersion
          - s3:GetObjectVersionAcl
          - s3:GetObjectVersionForReplication
          - s3:GetObjectVersionTorrent
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:ListBucketVersions
          - s3:ListMultipartUploadParts
          - s3:AbortMultipartUpload
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:PutObject
          - s3:PutObjectLegalHold
          - s3:PutObjectRetention
          - s3:RestoreObject
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket}/*
    Metadata:
      SamResourceId: Function
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Function}
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: info-arch-datafiles
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
        - Principal: '*'
          Action: '*'
          Effect: Deny
          Resource:
          - Fn::GetAtt:
            - Bucket
            - Arn
          - Fn::Sub: ${Bucket.Arn}/*
          Condition:
            Bool:
              aws:SecureTransport: 'false'
  Schedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(24 hours)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn:
          Fn::GetAtt:
          - Function
          - Arn
        RoleArn:
          Fn::GetAtt:
          - ScheduleToFunctionRole
          - Arn
    DependsOn: ScheduleToFunctionRole
  ScheduleToFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              Fn::Sub: scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
      - PolicyName: StartExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - Function
              - Arn
  Function2:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function2
      CodeUri: Function2
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        Bucket:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket
            Events:
            - s3:ObjectCreated:*
            - s3:ObjectRemoved:*
      Environment:
        Variables:
          BUCKET2_BUCKET_NAME:
            Ref: Bucket2
          BUCKET2_BUCKET_ARN:
            Fn::GetAtt:
            - Bucket2
            - Arn
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:GetObjectLegalHold
          - s3:GetObjectRetention
          - s3:GetObjectTorrent
          - s3:GetObjectVersion
          - s3:GetObjectVersionAcl
          - s3:GetObjectVersionForReplication
          - s3:GetObjectVersionTorrent
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:ListBucketVersions
          - s3:ListMultipartUploadParts
          - s3:AbortMultipartUpload
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:PutObject
          - s3:PutObjectLegalHold
          - s3:PutObjectRetention
          - s3:RestoreObject
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket2}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket2}/*
    Metadata:
      SamResourceId: Function2
  Function2LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Function2}
  Bucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-bucket2-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: alias/aws/s3
  Bucket2BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: Bucket2
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
        - Principal: '*'
          Action: '*'
          Effect: Deny
          Resource:
          - Fn::GetAtt:
            - Bucket2
            - Arn
          - Fn::Sub: ${Bucket2.Arn}/*
          Condition:
            Bool:
              aws:SecureTransport: 'false'
